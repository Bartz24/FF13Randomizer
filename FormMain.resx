<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label15.Text" xml:space="preserve">
    <value>High-max value randomization.
Crystarium shuffled with stats, abilities,
abilities in any role.
Enemy stats/levels/debuff,elemental res randomized.
Treasures/drops/prices randomized, shops shuffled.
Shop contents randomized.
Music shuffled, ATB/TP cost, run speed randomized.

</value>
  </data>
  <data name="label13.Text" xml:space="preserve">
    <value>Mid-high value randomization.
Crystarium shuffled with stats, abilities,
abilities in any role.
Enemy stats/levels/debuff,elemental res randomized.
Treasures/drops/prices randomized, shops shuffled.
Shop contents randomized.
Music shuffled, ATB/TP cost, run speed randomized.
</value>
  </data>
  <data name="label12.Text" xml:space="preserve">
    <value>Low-mid value randomization.
Crystarium shuffled with stats, abilities,
abilities in any role.
Enemy stats/level randomized.
Treasures/drops randomized, shops shuffled.
Shop contents randomized.
Music shuffled, run speed randomized.
</value>
  </data>
  <data name="label31.Text" xml:space="preserve">
    <value>Playing a Plando:
-You will need a JSON file exported from rando.
-Click on Load/Import Plando and load the JSON file.
-Once that has completed, everything will be set including seed and flags.
-You are now free to randomize the game or tweak things as wanted.


For help on making a Plando, check the Help tab.</value>
  </data>
  <data name="label32.Text" xml:space="preserve">
    <value>Each plando tab has settings which can be configured.
More specific details on each can be found in each help tab here.

General Info for Making a Plando:
-"???" or "-1" mean this value will be filled in later by the rando as normal. Any other value means it will be forced.
-Note that plandos will only work if their required flags are on (specified in each plando's help).</value>
  </data>
  <data name="label43.Text" xml:space="preserve">
    <value>Required Flags:
-"Randomize Equipment Stats and Passives": Required for all but synthesis groups
-"Randomize Equipment Synthesis Groups": Required for synthesis groups

Info:
Certain values can only be modified on weapons or accessories with passive types
where effect increases with upgrades</value>
  </data>
  <data name="label34.Text" xml:space="preserve">
    <value>Required Flags:
-"Randomize Shop Contents": Required for all values set. Sub flags are optional

Info:
-Each shop is split into each tier, so you will need to set each tier's full list of items, not just the new ones.</value>
  </data>
  <data name="label35.Text" xml:space="preserve">
    <value>Required Flags:
-"Shuffle Shop Locations": Required for all values set.

Info:
-It is recommended to set new shop replacements here, and not in Treasures.
    If you change a treasure to a different shop, changes to Shop Locations will apply afterwards.
    Ex: Mission 7 treasure is changed to Magical Moments, and Magical Moments in Shop Locations is changed to Sanctum Labs, 
        Mission 7 will now be Sanctum Labs.
-Unicorn Mart cannot be swapped, but it allowed as an option for New Shop to limit shops to be available.</value>
  </data>
  <data name="label36.Text" xml:space="preserve">
    <value>Required Flags:
-"Randomize Stats" (Enemies): Required for changes to Chain Resistance or Stagger Point.
-"Randomize Enemy Levels": Required for changes to Level or CP.
-Changes to HP, Strength, and Magic require at least 1 of the above flags.</value>
  </data>
  <data name="label38.Text" xml:space="preserve">
    <value>Required Flags:
-"Shuffle Nodes": Required for all changes set. 
    Abilities and stats needed will be set based on the other flags or filled best as possible if other flags are off
-"Randomize CP Costs": Required for changes to CP costs

Abilities:
-Set with a random ability by setting "New Type" to ability and "New Ability" to "???"
-Set with a specified ability by setting "New Type" to ability or "???" and "New Ability" to the ability you want

Stats:
-Set the "New Type" and "New Stat Amount". "New Ability" should be set to "???"

Other special nodes:
-Set only the "New Type"</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>NOTES:
-If you are just starting a new seed, just hit randomize again!
No need to uninstall!

-If you ever encounter technical issues with the rando,
try these steps:
    -Go to your steam folder and then where FF13 is installed
    -Delete the FF13Randomizer folder located there
    -Validate the FF13 files through Steam
</value>
  </data>
</root>